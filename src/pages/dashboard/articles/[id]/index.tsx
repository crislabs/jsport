import ArticleEditor from '@/components/ArticleEditor'
import LayoutDashboard from '@/layouts/HeaderDashboard'
import { getPortfolioArticle, getPortfolioArticlesBySiteId } from '@/lib/articles/read'
import { dehydrate, QueryClient } from '@tanstack/react-query'
import { GetStaticProps } from 'next'
import { useRouter } from 'next/router'
import React from 'react'
import Head from "next/head";

export default function Page() {
  const { query } = useRouter()
  return (
    <>
      <Head>
        <title>Editor</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ArticleEditor id={query.id as string} />
    </>
  )
}

Page.getLayout = function getLayout(page: React.ReactElement) {
  return (
    <LayoutDashboard>
      {page}
    </LayoutDashboard>
  )
}

export async function getStaticPaths() {
  const articles = await getPortfolioArticlesBySiteId(process.env.NEXT_PUBLIC_SITE_URL as string)
  // console.log('articles', )
  return {
    paths: articles.map(data => ({params: {id: data._id}})),
    fallback: 'blocking', // can also be true or 'blocking'
  }
}

export const getStaticProps: GetStaticProps = async (context) => {
  const { params } = context
  // console.log('params', params)
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery(
    ["get-article", params?.id as string],
    async () =>
    getPortfolioArticle(
        params?.id as string
      )
  );
  return {
    props: {
      dehydratedState: dehydrate(queryClient),
      revalidate: 86400,
    },
  };
};