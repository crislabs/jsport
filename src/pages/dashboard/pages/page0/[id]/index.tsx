import { GridArticles1 } from '@/components/grid/ListArticles1'
import { GridPages0 } from '@/components/grid/ListPages0'
import { useGetPage0 } from '@/hooks/usePages0'
// import { Page } from '@/interfaces/page'
import LayoutDashboard from '@/layouts/HeaderDashboard'
import { getPortfolioArticlesWithCursorByParentId } from '@/lib/articles/read'
import { getPortfolioGetPage0, getPortfolioGetPages0WithCursor, getPortfolioPages0BySiteId } from '@/lib/pages/page0/read'
import { PaginationProvider } from '@/providers/PaginationContext'
import { dehydrate, QueryClient } from '@tanstack/react-query'
import { GetStaticProps } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import React from 'react'

export default function Page() {
  const { query } = useRouter()
  const { data } = useGetPage0(query.id as string)
  // console.log('data', data)
  return (
    <>
      <Head >
        <title>Pages | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PaginationProvider>
      {
        data?.data.type.slug === 'page-blank' &&
        <div>page blank</div>
      }
      {
        data?.data.type.slug === 'category' &&
        <div>Category</div>
      }
      {
        data?.data.type.slug === 'contact' &&
        <div>Contact</div>
      }
      {
        data?.data.type.slug === 'blog' &&
        <GridArticles1 id={query.id as string} page={data} />
      }
      </PaginationProvider>
    </>
  )
}

Page.getLayout = function getLayout(page: React.ReactElement) {
  return (
    <LayoutDashboard>
      {page}
    </LayoutDashboard>
  )
}

export async function getStaticPaths() {
  const pages = await getPortfolioPages0BySiteId(process.env.NEXT_PUBLIC_SITE_URL as string) 
  // console.log('articles', )
  return {
    paths: pages.map((data: any) => ({params: {id: data._id}})),
    fallback: 'blocking', // can also be true or 'blocking'
  }
}

export const getStaticProps: GetStaticProps = async (props) => {
  const { params } = props
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery(
    ["portfolio-get-page0", params?.id as string],
    async () =>
    getPortfolioGetPage0(params?.id as string)
  );

  await queryClient.prefetchQuery(
    ["portfolio-get-articles1-with-cursor", {first: 256} , params?.id as string],
    async () =>
    getPortfolioArticlesWithCursorByParentId( {first: 256}, params?.id as string)
  );
  return {
    props: {
      dehydratedState: dehydrate(queryClient),
      revalidate: 86400,
    },
  };
};
